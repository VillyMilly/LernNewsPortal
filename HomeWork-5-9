from baseapp.models import *
from django.db.models import Sum
from datetime import datetime, date

Создать двух пользователей (с помощью метода User.objects.create_user('username')):
User.objects.create_user('Boris')
User.objects.create_user('Gleb')

Создать два объекта модели Author, связанные с пользователями:
Author.objects.create(pk=1) или Author.objects.create(user_id=1)
Author.objects.create(pk=2)

Добавить 4 категории в модель Category:
Category.objects.create(name='Horror')
Category.objects.create(name='Politic')
Category.objects.create(name='Sport')
Category.objects.create(name='Science')

Добавить 2 статьи и 1 новость:
Post.objects.create(author_id=2, articles_news = 'article', header='Заголовок 1.0', text_news='Kакой-то текст самой статьи')
Post.objects.create(author_id=1, articles_news = 'article', header='Заголовок 2.0', text_news='Текст второй статьи')
Post.objects.create(author_id=2, header='Заголовок новости', text_news='текст новости')

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):
PostCategory.objects.create(post_id=1, category_id=1)
PostCategory.objects.create(post_id=1, category_id=4)
PostCategory.objects.create(post_id=2, category_id=3)
PostCategory.objects.create(post_id=3, category_id=2)
PostCategory.objects.create(post_id=3, category_id=3)

Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):
Comment.objects.create(post_id=1, user_id=1, text_comment='Comment1')
Comment.objects.create(post_id=1, user_id=2, text_comment='Comment2')
Comment.objects.create(post_id=2, user_id=2, text_comment='Comment3')
Comment.objects.create(post_id=3, user_id=1, text_comment='Comment4')

Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=4).like()
Post.objects.get(pk=3).dislike()
Post.objects.get(pk=2).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()

Обновить рейтинги пользователей:
Author.objects.get(pk=2).update_rating()
Author.objects.get(pk=1).update_rating()

Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):
Author.objects.order_by('-rating')[:1].values('user__username', 'rating')

Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье:
number_post = Post.objects.order_by('-rating')[:1].values('pk')[0]['pk']
datetime.date(Post.objects.filter(pk=number_post).values('created_date')[0]['created_date'])
Post.objects.filter(pk=number_post).values('author__user__username', 'rating', 'header')
Post.objects.get(pk=number_post).preview()


Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:
posts = Post.objects.filter(pk=number_post).values('comment')
for i in posts:
     number_comment = i['comment']
     datetime.date(Comment.objects.filter(pk=number_comment).values('created_date')[0]['created_date'])
     Comment.objects.filter(pk=number_comment).values('user__username', 'rating', 'text_comment')
